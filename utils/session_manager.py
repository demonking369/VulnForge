# ╔══════════════════════════════════════════════════════════╗
# ║ VulnForge - Built with Blood by DemonKing369.0 👑        ║
# ║ GitHub: https://github.com/Arunking9                     ║
# ║ AI-Powered Security Framework for Bug Bounty Warriors ⚔️║
# ╚══════════════════════════════════════════════════════════╝

import os
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional


class SessionManager:
    """Manages session data and metadata."""

    def __init__(self, base_dir: str):
        """Initialize session manager.

        Args:
            base_dir: Base directory for session data
        """
        self.base_dir = Path(base_dir)
        self.session_dir = None
        self.metadata_file = None

    def create_session(self, target: str) -> str:
        """Create a new session directory.

        Args:
            target: Target identifier

        Returns:
            Path to session directory
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_dir = self.base_dir / target / timestamp
        self.session_dir.mkdir(parents=True, exist_ok=True)

        # Create metadata file
        self.metadata_file = self.session_dir / "meta.txt"
        self._write_metadata()

        # Create subdirectories
        (self.session_dir / "logs").mkdir(exist_ok=True)
        (self.session_dir / "data").mkdir(exist_ok=True)
        (self.session_dir / "tools").mkdir(exist_ok=True)
        (self.session_dir / "exploits").mkdir(exist_ok=True)

        return str(self.session_dir)

    def _write_metadata(self):
        """Write session metadata file."""
        metadata = f"""Session generated by VulnForge
Author: DemonKing369.0
GitHub: https://github.com/Arunking9
Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Target: {self.session_dir.parent.name}
Session ID: {self.session_dir.name}
"""
        with open(self.metadata_file, "w") as f:
            f.write(metadata)

    def save_data(self, data: Dict[str, Any], filename: str):
        """Save data to session directory.

        Args:
            data: Data to save
            filename: Output filename
        """
        if not self.session_dir:
            raise RuntimeError("No active session")

        output_path = self.session_dir / "data" / filename
        with open(output_path, "w") as f:
            json.dump(data, f, indent=2, default=str)

    def load_data(self, filename: str) -> Dict[str, Any]:
        """Load data from session directory.

        Args:
            filename: Input filename

        Returns:
            Loaded data
        """
        if not self.session_dir:
            raise RuntimeError("No active session")

        input_path = self.session_dir / "data" / filename
        with open(input_path, "r") as f:
            return json.load(f)

    def get_session_path(self) -> Optional[str]:
        """Get current session directory path.

        Returns:
            Path to current session directory or None if no active session
        """
        return str(self.session_dir) if self.session_dir else None
